<Activity mc:Ignorable="sap sap2010" x:Class="Process" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:isactr="http://schemas.uipath.com/workflow/integration-service-activities/isactr" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:sc="clr-namespace:System.ComponentModel;assembly=System.ComponentModel.TypeConverter" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:str="clr-namespace:System.Text.RegularExpressions;assembly=System.Text.RegularExpressions" xmlns:uasa="clr-namespace:UiPath.Activities.System.Arrays;assembly=UiPath.System.Activities" xmlns:uga="clr-namespace:UiPath.GSuite.Activities;assembly=UiPath.GSuite.Activities" xmlns:ugade="clr-namespace:UiPath.GSuite.Activities.Drive.Enums;assembly=UiPath.GSuite.Activities" xmlns:ugam="clr-namespace:UiPath.GSuite.Activities.Models;assembly=UiPath.GSuite.Activities" xmlns:ugdm="clr-namespace:UiPath.GSuite.Drive.Models;assembly=UiPath.GSuite" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:uiascb="clr-namespace:UiPath.IntegrationService.Activities.SWEntities.CFF6BB82F91_v2_sub_generateChatCompletion_Create.Bundle;assembly=CFF6BB82F91_v2_sub_g.PT9Ba2YKLZJ18lW6M4JNwCv" xmlns:usau="clr-namespace:UiPath.Shared.Activities.Utils;assembly=UiPath.GSuite.Activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_strPrompt" Type="InArgument(x:String)" />
    <x:Property Name="out_strUrl" Type="OutArgument(x:String)" />
    <x:Property Name="in_strContent" Type="InArgument(x:String)" />
    <x:Property Name="in_gdriveFolder" Type="InArgument(ugdm:GDriveRemoteItem)" />
    <x:Property Name="in_boolTexts" Type="InArgument(x:Boolean)" />
    <x:Property Name="in_strGoogleCredential" Type="InArgument(x:String)" />
  </x:Members>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>818.4,454.4</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>ProcessTransaction_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="100">
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Windows.Forms</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>UiPath.GSuite.Activities.Drive.Enums</x:String>
      <x:String>UiPath.GSuite.Drive.Models</x:String>
      <x:String>UiPath.Platform.ResourceHandling</x:String>
      <x:String>UiPath.GSuite.Activities.Models</x:String>
      <x:String>UiPath.Shared.Activities.Utils</x:String>
      <x:String>UiPath.GSuite.Activities</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>UiPath.Shared.Activities.ConnectionService.Contracts</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Linq.Expressions</x:String>
      <x:String>UiPath.GSuite</x:String>
      <x:String>UiPath.IntegrationService.Activities.Runtime.Models.FilterBuilder</x:String>
      <x:String>UiPath.IntegrationService.Activities.Runtime.Models</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>UiPath.IntegrationService.Activities.Runtime.Helpers.TypeDetailsCustomization</x:String>
      <x:String>UiPath.IntegrationService.Activities.Runtime.Activities</x:String>
      <x:String>UiPath.Platform.Activities</x:String>
      <x:String>UiPath.Word.Activities</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>UiPath.Excel.Activities.Business</x:String>
      <x:String>UiPath.Word</x:String>
      <x:String>UiPath.Shared.Activities.Business</x:String>
      <x:String>UiPath.GSuite.Activities.Docs</x:String>
      <x:String>UiPath.GSuite.Activities.Docs.Enums</x:String>
      <x:String>UiPath.GSuite.Activities.Enums</x:String>
      <x:String>UiPath.GSuite.Activities.Contracts</x:String>
      <x:String>Google.Apis.Auth.OAuth2</x:String>
      <x:String>Google.Apis.Docs.v1</x:String>
      <x:String>Google.Apis.Docs.v1.Data</x:String>
      <x:String>Google.Apis.Services</x:String>
      <x:String>System.Threading.Tasks</x:String>
      <x:String>System.Text.RegularExpressions</x:String>
      <x:String>System.Activities.Runtime.Collections</x:String>
      <x:String>UiPath.Activities.System.Arrays</x:String>
      <x:String>UiPath.Activities.System.Collections</x:String>
      <x:String>System.Numerics</x:String>
      <x:String>UiPath.IntegrationService.Activities.SWEntities.CFF6BB82F91_v2_sub_generateChatCompletion_Create.Bundle</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="160">
      <AssemblyReference>Microsoft.Bcl.AsyncInterfaces</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.Windows.Forms</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>UiPath.GSuite.Activities</AssemblyReference>
      <AssemblyReference>UiPath.GSuite</AssemblyReference>
      <AssemblyReference>UiPath.Platform</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.Reflection.MetadataLoadContext</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>UiPath.IntegrationService.Activities.Runtime</AssemblyReference>
      <AssemblyReference>System.ComponentModel.EventBasedAsync</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>C67A9CCCB6D_v2_sub_g.cicNZ3bBCJ1HuAuP1Elfu2</AssemblyReference>
      <AssemblyReference>System.Linq.Async</AssemblyReference>
      <AssemblyReference>System.Collections.NonGeneric</AssemblyReference>
      <AssemblyReference>UiPath.Word.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Word</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Word.Activities.Design</AssemblyReference>
      <AssemblyReference>Google.Apis.Auth</AssemblyReference>
      <AssemblyReference>Google.Apis.Docs.v1</AssemblyReference>
      <AssemblyReference>Google.Apis</AssemblyReference>
      <AssemblyReference>UiPath.Vision.Core</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Core</AssemblyReference>
      <AssemblyReference>System.Threading.Tasks.Parallel</AssemblyReference>
      <AssemblyReference>System.Text.RegularExpressions</AssemblyReference>
      <AssemblyReference>System.Runtime.Numerics</AssemblyReference>
      <AssemblyReference>System.Linq.Async.Queryable</AssemblyReference>
      <AssemblyReference>System.Linq.Parallel</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.Linq.Queryable</AssemblyReference>
      <AssemblyReference>System.CodeDom</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic.Forms</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic.Core</AssemblyReference>
      <AssemblyReference>C1F775216B1_generate.D9bAE4htkVP1ES9Yk1JRpt6</AssemblyReference>
      <AssemblyReference>CFF6BB82F91_v2_sub_g.PT9Ba2YKLZJ18lW6M4JNwCv</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="Invoke major steps of the business process, which are usually implemented by multiple subworkflows.&#xA;&#xA;If a BusinessRuleException is thrown, the transaction is skipped. &#xA;If another kind of exception occurs, the current transaction can be retried. " DisplayName="GeneratedDocument" sap:VirtualizedContainerService.HintSize="1074,1104" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="ugdm:GDriveRemoteItem" Name="gdirveDocument" />
      <Variable x:TypeArguments="x:String" Name="strTextGenerated" />
      <Variable x:TypeArguments="scg:List(x:String)" Name="listHeading1Texts" />
      <Variable x:TypeArguments="scg:List(x:String)" Name="listHeading2Texts" />
      <Variable x:TypeArguments="scg:List(x:String)" Name="listHeading3Texts" />
      <Variable x:TypeArguments="scg:List(x:String)" Name="listTitleTexts" />
      <Variable x:TypeArguments="scg:List(x:String)" Name="listBoldTexts" />
      <Variable x:TypeArguments="scg:List(x:String)" Name="listHeading4Texts" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">False</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:MultipleAssign DisplayName="Multiple Assign List" sap:VirtualizedContainerService.HintSize="1074,57" sap2010:WorkflowViewState.IdRef="MultipleAssign_1">
      <ui:MultipleAssign.AssignOperations>
        <scg:List x:TypeArguments="ui:AssignOperation" Capacity="8">
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_1">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="scg:List(x:String)">[listHeading1Texts]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="scg:List(x:String)">[New List(Of String)]</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_2">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="scg:List(x:String)">[listHeading2Texts]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="scg:List(x:String)">[New List(Of String)]</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_3">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="scg:List(x:String)">[listHeading3Texts]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="scg:List(x:String)">[New List(Of String)]</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_4">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="scg:List(x:String)">[listTitleTexts]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="scg:List(x:String)">[New List(Of String)]</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_5">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="scg:List(x:String)">[listBoldTexts]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="scg:List(x:String)">[New List(Of String)]</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_6">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="scg:List(x:String)">[listHeading4Texts]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="scg:List(x:String)">[New List(Of String)]</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
        </scg:List>
      </ui:MultipleAssign.AssignOperations>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:MultipleAssign>
    <uga:CreateDocumentConnections BrowserParentFolderFriendlyName="{x:Null}" BrowserParentFolderId="{x:Null}" ConnectionAccountName="{x:Null}" ContinueOnError="{x:Null}" FolderIdBackup="{x:Reference __ReferenceID0}" ManualEntryParentFolderId="{x:Null}" AuthScopesInvalid="False" ConflictResolution="[UiPath.GSuite.Activities.Drive.Enums.ConflictBehavior.AddSeparate]" ConnectionId="9ec480b7-fae9-4cdd-92ec-3d02a4f03c90" DisplayName="Create File Document" DocumentName="[in_strContent]" sap:VirtualizedContainerService.HintSize="1074,57" sap2010:WorkflowViewState.IdRef="CreateDocumentConnections_1" NewDocument="[gdirveDocument]" ParentFolderExisting="[in_gdriveFolder]" ParentFolderInputMode="UseExisting" UseConnectionService="True">
      <uga:CreateDocumentConnections.Item>
        <ugam:DriveItemArgument BrowserId="{x:Null}" ConnectionDescriptor="{x:Null}" FriendlyName="{x:Null}" FullPath="{x:Null}" IdOrUrl="{x:Null}" ParentId="{x:Null}" ParentIdFriendlyName="{x:Null}" RelativePath="{x:Null}" ConnectionKey="f82a3549-a140-4ce4-be97-b4f6a81f153a" Existing="[in_gdriveFolder]" FullPathHint="My Drive/GeneratedDocuments" InputMode="UseExisting">
          <ugam:DriveItemArgument.Backup>
            <usau:BackupSlot x:TypeArguments="ugade:EDriveItemMode" x:Name="__ReferenceID0" StoredValue="UseExisting">
              <usau:BackupSlot.BackupValues>
                <scg:List x:TypeArguments="x:Object" x:Key="Browse" Capacity="2">
                  <InArgument x:TypeArguments="x:String">https://drive.google.com/drive/folders/1RW1-K_G_2s7qRSkEhml0pgJt-4j6YmQb</InArgument>
                  <InArgument x:TypeArguments="x:String">GeneratedDocuments</InArgument>
                </scg:List>
                <scg:List x:TypeArguments="x:Object" x:Key="UseExisting" Capacity="1">
                  <InArgument x:TypeArguments="ugdm:GDriveRemoteItem">["GeneratedText"]</InArgument>
                </scg:List>
                <scg:List x:TypeArguments="x:Object" x:Key="UrlOrId" Capacity="1">
                  <x:Null />
                </scg:List>
              </usau:BackupSlot.BackupValues>
            </usau:BackupSlot>
          </ugam:DriveItemArgument.Backup>
          <ugam:DriveItemArgument.ParentIdFullPathHint>
            <InArgument x:TypeArguments="x:String">
              <Literal x:TypeArguments="x:String" Value="" />
            </InArgument>
          </ugam:DriveItemArgument.ParentIdFullPathHint>
        </ugam:DriveItemArgument>
      </uga:CreateDocumentConnections.Item>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </uga:CreateDocumentConnections>
    <Assign DisplayName="Assign out_strUrl" sap:VirtualizedContainerService.HintSize="1074,114" sap2010:WorkflowViewState.IdRef="Assign_18">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[out_strUrl]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">[gdirveDocument.Url]</InArgument>
      </Assign.Value>
    </Assign>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="1074,173" sap2010:WorkflowViewState.IdRef="LogMessage_2" Level="Info" Message="[&quot;File : &quot;+in_strContent+vbNewLine+&#xA;&quot;DocUrl : &quot; +out_strUrl+vbNewLine+&#xA;&quot;DocId : &quot;+gdirveDocument.ID]">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:LogMessage>
    <isactr:ConnectorActivity Configuration="" ConnectionId="ace5bb0d-6f16-4748-b325-9fff6bb82f91" DisplayName="Content Generation" sap:VirtualizedContainerService.HintSize="1074,57" sap2010:WorkflowViewState.IdRef="ConnectorActivity_2" UiPathActivityTypeId="aba52a00-4c05-318d-8f99-5ad924b2f277">
      <isactr:ConnectorActivity.FieldObjects>
        <isactr:FieldObject Name="modelName" Type="FieldArgument">
          <isactr:FieldObject.Value>
            <InArgument x:TypeArguments="x:String">gpt-4o-mini-2024-07-18</InArgument>
          </isactr:FieldObject.Value>
        </isactr:FieldObject>
        <isactr:FieldObject Name="prompt" Type="FieldArgument">
          <isactr:FieldObject.Value>
            <InArgument x:TypeArguments="x:String">[in_strPrompt + " "+in_strContent]</InArgument>
          </isactr:FieldObject.Value>
        </isactr:FieldObject>
        <isactr:FieldObject Name="isPIIEnabled" Type="FieldArgument">
          <isactr:FieldObject.Value>
            <InArgument x:TypeArguments="x:Boolean">False</InArgument>
          </isactr:FieldObject.Value>
        </isactr:FieldObject>
        <isactr:FieldObject Name="isFilterPIIEnabled" Type="FieldArgument" />
        <isactr:FieldObject Name="languageCode" Type="FieldArgument" />
        <isactr:FieldObject Name="piiEntityCategories_array" Type="FieldArgument" />
        <isactr:FieldObject Name="confidenceThreshold" Type="FieldArgument" />
        <isactr:FieldObject Name="topK" Type="FieldArgument" />
        <isactr:FieldObject Name="contextGrounding" Type="FieldArgument">
          <isactr:FieldObject.Value>
            <InArgument x:TypeArguments="x:String">None</InArgument>
          </isactr:FieldObject.Value>
        </isactr:FieldObject>
        <isactr:FieldObject Name="_file" Type="FieldArgument" />
        <isactr:FieldObject Name="folderKey" Type="FieldArgument" />
        <isactr:FieldObject Name="topP" Type="FieldArgument" />
        <isactr:FieldObject Name="indexID" Type="FieldArgument" />
        <isactr:FieldObject Name="numberOfResults" Type="FieldArgument" />
        <isactr:FieldObject Name="top_p" Type="FieldArgument">
          <isactr:FieldObject.Value>
            <InArgument x:TypeArguments="x:Int64">1</InArgument>
          </isactr:FieldObject.Value>
        </isactr:FieldObject>
        <isactr:FieldObject Name="instruction" Type="FieldArgument">
          <isactr:FieldObject.Value>
            <InArgument x:TypeArguments="x:String">You are a helpful assistant</InArgument>
          </isactr:FieldObject.Value>
        </isactr:FieldObject>
        <isactr:FieldObject Name="max_tokens" Type="FieldArgument">
          <isactr:FieldObject.Value>
            <InArgument x:TypeArguments="x:Int64" />
          </isactr:FieldObject.Value>
        </isactr:FieldObject>
        <isactr:FieldObject Name="temperature" Type="FieldArgument">
          <isactr:FieldObject.Value>
            <InArgument x:TypeArguments="x:Double">0.5</InArgument>
          </isactr:FieldObject.Value>
        </isactr:FieldObject>
        <isactr:FieldObject Name="frequency_penalty" Type="FieldArgument">
          <isactr:FieldObject.Value>
            <InArgument x:TypeArguments="x:Int64">1</InArgument>
          </isactr:FieldObject.Value>
        </isactr:FieldObject>
        <isactr:FieldObject Name="presence_penalty" Type="FieldArgument">
          <isactr:FieldObject.Value>
            <InArgument x:TypeArguments="x:Int64">1</InArgument>
          </isactr:FieldObject.Value>
        </isactr:FieldObject>
        <isactr:FieldObject Name="n" Type="FieldArgument">
          <isactr:FieldObject.Value>
            <InArgument x:TypeArguments="x:Int64">1</InArgument>
          </isactr:FieldObject.Value>
        </isactr:FieldObject>
        <isactr:FieldObject Name="_stop" Type="FieldArgument">
          <isactr:FieldObject.Value>
            <InArgument x:TypeArguments="x:String" />
          </isactr:FieldObject.Value>
        </isactr:FieldObject>
        <isactr:FieldObject Name="out_text" Type="FieldArgument">
          <isactr:FieldObject.Value>
            <OutArgument x:TypeArguments="x:String">[strTextGenerated]</OutArgument>
          </isactr:FieldObject.Value>
        </isactr:FieldObject>
        <isactr:FieldObject Name="out_maskedText" Type="FieldArgument">
          <isactr:FieldObject.Value>
            <OutArgument x:TypeArguments="x:String" />
          </isactr:FieldObject.Value>
        </isactr:FieldObject>
        <isactr:FieldObject Name="Jit_v2_sub_generateChatCompletion" Type="FieldArgument">
          <isactr:FieldObject.Value>
            <OutArgument x:TypeArguments="uiascb:v2_sub_generateChatCompletion_Create" />
          </isactr:FieldObject.Value>
        </isactr:FieldObject>
        <isactr:FieldObject Name="out_contextGroundingCitationsString" Type="FieldArgument">
          <isactr:FieldObject.Value>
            <OutArgument x:TypeArguments="x:String" />
          </isactr:FieldObject.Value>
        </isactr:FieldObject>
      </isactr:ConnectorActivity.FieldObjects>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </isactr:ConnectorActivity>
    <ui:InvokeCode ContinueOnError="{x:Null}" Code=" string RemoveEmptyLines(string input)&#xA;    {&#xA;        return string.Join(&quot;\n&quot;, input.Split('\n')&#xA;                                      .Where(line =&gt; !string.IsNullOrWhiteSpace(line))&#xA;                                      .ToArray());&#xA;    }&#xA;&#x9;result = RemoveEmptyLines(text);" DisplayName="Invoke Code Remove Line Empty" sap:VirtualizedContainerService.HintSize="1074,197" sap2010:WorkflowViewState.IdRef="InvokeCode_6" Language="CSharp">
      <ui:InvokeCode.Arguments>
        <OutArgument x:TypeArguments="x:String" x:Key="result">[strTextGenerated]</OutArgument>
        <InArgument x:TypeArguments="x:String" x:Key="text">[strTextGenerated]</InArgument>
      </ui:InvokeCode.Arguments>
    </ui:InvokeCode>
    <Parallel sap:VirtualizedContainerService.HintSize="1074,119" sap2010:WorkflowViewState.IdRef="Parallel_2">
      <Sequence DisplayName="Headings" sap:VirtualizedContainerService.HintSize="490,40" sap2010:WorkflowViewState.IdRef="Sequence_45">
        <Sequence.Variables>
          <Variable x:TypeArguments="scg:IEnumerable(str:Match)" Name="listMatchesHeading" />
        </Sequence.Variables>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <ui:Matches FirstMatch="{x:Null}" BuilderPattern="(?:\#).*" DisplayName="Find Matching Patterns Heading" sap:VirtualizedContainerService.HintSize="416,92" sap2010:WorkflowViewState.IdRef="Matches_1" Input="[strTextGenerated]" IsBuilderTabModified="True" Model="[{&quot;Index&quot;:0,&quot;OperationID&quot;:&quot;ADV&quot;,&quot;OperationName&quot;:&quot;Advanced&quot;,&quot;OperationValue&quot;:&quot;(?:\\#).*&quot;,&quot;QuantifierFirstValue&quot;:&quot;1&quot;,&quot;QuantifierID&quot;:&quot;EXT&quot;,&quot;QuantifierName&quot;:&quot;Exactly&quot;,&quot;QuantifierSecondValue&quot;:null}]" Pattern="(?:\#).*" RegexOption="IgnoreCase, Compiled" Result="[listMatchesHeading]">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </ui:Matches>
        <If Condition="[in_strPrompt.trim.ToLower.Contains(&quot;title&quot;) OrElse &#xA;in_strPrompt.trim.ToLower.Contains(&quot;tieude&quot;) OrElse&#xA;in_strPrompt.trim.ToLower.Contains(&quot;tiêu đề&quot;) OrElse&#xA;in_strPrompt.trim.ToLower.Contains(&quot;tiêuđề&quot;)]" DisplayName="If Check Have Need Title" sap:VirtualizedContainerService.HintSize="416,57" sap2010:WorkflowViewState.IdRef="If_1">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <If.Then>
            <Sequence DisplayName="Then" sap:VirtualizedContainerService.HintSize="502,755" sap2010:WorkflowViewState.IdRef="Sequence_42">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <Sequence DisplayName="add_list_title" sap:VirtualizedContainerService.HintSize="468,695" sap2010:WorkflowViewState.IdRef="Sequence_44">
                <Sequence.Variables>
                  <Variable x:TypeArguments="str:Match" Name="strFindMatch" />
                  <Variable x:TypeArguments="x:String" Name="strReplaceMatch" />
                </Sequence.Variables>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <Assign DisplayName="Assign strFindMatch" sap:VirtualizedContainerService.HintSize="434,114" sap2010:WorkflowViewState.IdRef="Assign_15">
                  <Assign.To>
                    <OutArgument x:TypeArguments="str:Match">[strFindMatch]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="str:Match">[listMatchesHeading(0)]</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign DisplayName="Assign strReplceMatch" sap:VirtualizedContainerService.HintSize="434,114" sap2010:WorkflowViewState.IdRef="Assign_16">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[strReplaceMatch]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">[strFindMatch.Value.Replace("#","").Trim]</InArgument>
                  </Assign.Value>
                </Assign>
                <uasa:AppendItemToList x:TypeArguments="x:String" ItemIndex="{x:Null}" DisplayName="Append Item to List Title" sap:VirtualizedContainerService.HintSize="434,165" sap2010:WorkflowViewState.IdRef="AppendItemToList`1_27" ItemToAppend="[strReplaceMatch]" List="[listTitleTexts]" />
                <Assign DisplayName="Assign strTextGenerated" sap:VirtualizedContainerService.HintSize="434,114" sap2010:WorkflowViewState.IdRef="Assign_17">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[strTextGenerated]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">[strTextGenerated.Replace(strFindMatch.Value.Trim,strReplaceMatch)]</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign DisplayName="Assign listMatches skip 1" sap:VirtualizedContainerService.HintSize="434,105" sap2010:WorkflowViewState.IdRef="Assign_14">
                  <Assign.To>
                    <OutArgument x:TypeArguments="scg:IEnumerable(str:Match)">[listMatchesHeading]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="scg:IEnumerable(str:Match)">[listMatchesHeading.Skip(1).ToList]</InArgument>
                  </Assign.Value>
                </Assign>
              </Sequence>
            </Sequence>
          </If.Then>
          <If.Else>
            <Sequence DisplayName="Else" sap:VirtualizedContainerService.HintSize="502,89" sap2010:WorkflowViewState.IdRef="Sequence_43">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </Sequence>
          </If.Else>
        </If>
        <ParallelForEach x:TypeArguments="str:Match" DisplayName="Parallel For Each ListMatches" sap:VirtualizedContainerService.HintSize="416,48" sap2010:WorkflowViewState.IdRef="ParallelForEach`1_4" Values="[listMatchesHeading]">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ActivityAction x:TypeArguments="str:Match">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="str:Match" Name="item" />
            </ActivityAction.Argument>
            <TryCatch DisplayName="tc_add_list_headings" sap:VirtualizedContainerService.HintSize="506,2119" sap2010:WorkflowViewState.IdRef="TryCatch_1">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <TryCatch.Try>
                <Sequence DisplayName="try_add_list_headings" sap:VirtualizedContainerService.HintSize="504,1863" sap2010:WorkflowViewState.IdRef="Sequence_12">
                  <Sequence.Variables>
                    <Variable x:TypeArguments="x:String" Name="strFindMatch" />
                    <Variable x:TypeArguments="x:String" Name="strReplaceMatch" />
                  </Sequence.Variables>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <Assign DisplayName="Assign strFindMatch" sap:VirtualizedContainerService.HintSize="470,114" sap2010:WorkflowViewState.IdRef="Assign_1">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[strFindMatch]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[item.Value]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:IfElseIfV2 Condition="[Not String.IsNullOrEmpty(strFindMatch) AndAlso strFindMatch.Substring(0,4).Equals(&quot;####&quot;)]" DisplayName="Else If Check Heading" sap:VirtualizedContainerService.HintSize="470,1584" sap2010:WorkflowViewState.IdRef="IfElseIfV2_1">
                    <ui:IfElseIfV2.Else>
                      <Sequence DisplayName="Else" sap:VirtualizedContainerService.HintSize="468,330" sap2010:WorkflowViewState.IdRef="Sequence_11">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <Assign DisplayName="Assign strReplceMatch" sap:VirtualizedContainerService.HintSize="434,114" sap2010:WorkflowViewState.IdRef="Assign_7">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">[strReplaceMatch]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">[strFindMatch.Replace("#","").Trim]</InArgument>
                          </Assign.Value>
                        </Assign>
                        <uasa:AppendItemToList x:TypeArguments="x:String" ItemIndex="{x:Null}" DisplayName="Append Item to List Heading1" sap:VirtualizedContainerService.HintSize="434,156" sap2010:WorkflowViewState.IdRef="AppendItemToList`1_31" ItemToAppend="[strReplaceMatch]" List="[listHeading1Texts]" />
                      </Sequence>
                    </ui:IfElseIfV2.Else>
                    <ui:IfElseIfV2.ElseIfs>
                      <sc:BindingList x:TypeArguments="ui:IfElseIfBlock" AllowEdit="True" AllowNew="True" AllowRemove="True" RaiseListChangedEvents="True">
                        <ui:IfElseIfBlock BlockType="ElseIf" Condition="[Not String.IsNullOrEmpty(strFindMatch) AndAlso strFindMatch.Substring(0,3).Equals(&quot;###&quot;)]" DisplayName="If else if block" sap2010:WorkflowViewState.IdRef="IfElseIfBlock_2">
                          <ui:IfElseIfBlock.Then>
                            <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="468,330" sap2010:WorkflowViewState.IdRef="Sequence_15">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <Assign DisplayName="Assign strReplceMatch" sap:VirtualizedContainerService.HintSize="434,114" sap2010:WorkflowViewState.IdRef="Assign_5">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:String">[strReplaceMatch]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:String">[strFindMatch.Replace("###","").Trim]</InArgument>
                                </Assign.Value>
                              </Assign>
                              <uasa:AppendItemToList x:TypeArguments="x:String" ItemIndex="{x:Null}" DisplayName="Append Item to List Heading3" sap:VirtualizedContainerService.HintSize="434,156" sap2010:WorkflowViewState.IdRef="AppendItemToList`1_29" ItemToAppend="[strReplaceMatch]" List="[listHeading3Texts]" />
                            </Sequence>
                          </ui:IfElseIfBlock.Then>
                        </ui:IfElseIfBlock>
                        <ui:IfElseIfBlock BlockType="ElseIf" Condition="[Not String.IsNullOrEmpty(strFindMatch) AndAlso strFindMatch.Substring(0,2).Equals(&quot;##&quot;)]" DisplayName="If else if block" sap2010:WorkflowViewState.IdRef="IfElseIfBlock_6">
                          <ui:IfElseIfBlock.Then>
                            <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="468,330" sap2010:WorkflowViewState.IdRef="Sequence_64">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <Assign DisplayName="Assign strReplceMatch" sap:VirtualizedContainerService.HintSize="434,114" sap2010:WorkflowViewState.IdRef="Assign_6">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:String">[strReplaceMatch]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:String">[strFindMatch.Replace("##","").Trim]</InArgument>
                                </Assign.Value>
                              </Assign>
                              <uasa:AppendItemToList x:TypeArguments="x:String" ItemIndex="{x:Null}" DisplayName="Append Item to List Heading2" sap:VirtualizedContainerService.HintSize="434,156" sap2010:WorkflowViewState.IdRef="AppendItemToList`1_30" ItemToAppend="[strReplaceMatch]" List="[listHeading2Texts]" />
                            </Sequence>
                          </ui:IfElseIfBlock.Then>
                        </ui:IfElseIfBlock>
                      </sc:BindingList>
                    </ui:IfElseIfV2.ElseIfs>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <ui:IfElseIfV2.Then>
                      <Sequence DisplayName="Then" sap:VirtualizedContainerService.HintSize="468,330" sap2010:WorkflowViewState.IdRef="Sequence_10">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <Assign DisplayName="Assign strReplceMatch" sap:VirtualizedContainerService.HintSize="434,114" sap2010:WorkflowViewState.IdRef="Assign_34">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">[strReplaceMatch]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">[strFindMatch.Replace("####","").Trim]</InArgument>
                          </Assign.Value>
                        </Assign>
                        <uasa:AppendItemToList x:TypeArguments="x:String" ItemIndex="{x:Null}" DisplayName="Append Item to List Heading4" sap:VirtualizedContainerService.HintSize="434,156" sap2010:WorkflowViewState.IdRef="AppendItemToList`1_28" ItemToAppend="[strReplaceMatch]" List="[listHeading4Texts]" />
                      </Sequence>
                    </ui:IfElseIfV2.Then>
                  </ui:IfElseIfV2>
                  <Assign DisplayName="Assign strTextGenerated" sap:VirtualizedContainerService.HintSize="470,105" sap2010:WorkflowViewState.IdRef="Assign_4">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[strTextGenerated]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[strTextGenerated.Replace(strFindMatch,strReplaceMatch)]</InArgument>
                    </Assign.Value>
                  </Assign>
                </Sequence>
              </TryCatch.Try>
              <TryCatch.Catches>
                <Catch x:TypeArguments="s:Exception" sap2010:WorkflowViewState.IdRef="Catch`1_1">
                  <ActivityAction x:TypeArguments="s:Exception">
                    <ActivityAction.Argument>
                      <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                    </ActivityAction.Argument>
                    <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="504,89" sap2010:WorkflowViewState.IdRef="Sequence_14">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </Sequence>
                  </ActivityAction>
                </Catch>
              </TryCatch.Catches>
              <TryCatch.Finally>
                <Sequence DisplayName="Finally" sap:VirtualizedContainerService.HintSize="504,25" sap2010:WorkflowViewState.IdRef="Sequence_13">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </Sequence>
              </TryCatch.Finally>
            </TryCatch>
          </ActivityAction>
        </ParallelForEach>
      </Sequence>
      <Sequence DisplayName="BoldTexts" sap:VirtualizedContainerService.HintSize="490,40" sap2010:WorkflowViewState.IdRef="Sequence_46">
        <Sequence.Variables>
          <Variable x:TypeArguments="scg:IEnumerable(str:Match)" Name="listMatchesTexts" />
        </Sequence.Variables>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <If Condition="[in_boolTexts]" DisplayName="If Check Bold Texts" sap:VirtualizedContainerService.HintSize="470,494" sap2010:WorkflowViewState.IdRef="If_2">
          <If.Then>
            <Sequence DisplayName="Then" sap:VirtualizedContainerService.HintSize="468,200" sap2010:WorkflowViewState.IdRef="Sequence_71">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ui:Matches FirstMatch="{x:Null}" BuilderPattern="(?:\#).*" DisplayName="Find Matching Patterns Texts" sap:VirtualizedContainerService.HintSize="434,92" sap2010:WorkflowViewState.IdRef="Matches_2" Input="[strTextGenerated]" IsBuilderTabModified="True" Model="[{&quot;Index&quot;:0,&quot;OperationID&quot;:&quot;ADV&quot;,&quot;OperationName&quot;:&quot;Advanced&quot;,&quot;OperationValue&quot;:&quot;(?:\\#).*&quot;,&quot;QuantifierFirstValue&quot;:&quot;1&quot;,&quot;QuantifierID&quot;:&quot;EXT&quot;,&quot;QuantifierName&quot;:&quot;Exactly&quot;,&quot;QuantifierSecondValue&quot;:null}]" Pattern="(?:\*\*).*(?:\*\*)" RegexOption="IgnoreCase, Compiled" Result="[listMatchesTexts]">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </ui:Matches>
              <ParallelForEach x:TypeArguments="str:Match" DisplayName="Parallel For Each ListMatches" sap:VirtualizedContainerService.HintSize="434,48" sap2010:WorkflowViewState.IdRef="ParallelForEach`1_5" Values="[listMatchesTexts]">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ActivityAction x:TypeArguments="str:Match">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="str:Match" Name="item" />
                  </ActivityAction.Argument>
                  <TryCatch DisplayName="tc_add_list_headings" sap:VirtualizedContainerService.HintSize="470,814" sap2010:WorkflowViewState.IdRef="TryCatch_2">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <TryCatch.Try>
                      <Sequence DisplayName="try_add_list_headings" sap:VirtualizedContainerService.HintSize="468,558" sap2010:WorkflowViewState.IdRef="Sequence_47">
                        <Sequence.Variables>
                          <Variable x:TypeArguments="x:String" Name="strFindMatch" />
                          <Variable x:TypeArguments="x:String" Name="strReplaceMatch" />
                        </Sequence.Variables>
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <Assign DisplayName="Assign strFindMatch" sap:VirtualizedContainerService.HintSize="434,114" sap2010:WorkflowViewState.IdRef="Assign_19">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">[strFindMatch]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">[item.Value]</InArgument>
                          </Assign.Value>
                        </Assign>
                        <Assign DisplayName="Assign strReplceMatch" sap:VirtualizedContainerService.HintSize="434,114" sap2010:WorkflowViewState.IdRef="Assign_21">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">[strReplaceMatch]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">[strFindMatch.Replace("**","").Trim]</InArgument>
                          </Assign.Value>
                        </Assign>
                        <uasa:AppendItemToList x:TypeArguments="x:String" ItemIndex="{x:Null}" DisplayName="Append Item to List BoldTexts" sap:VirtualizedContainerService.HintSize="434,165" sap2010:WorkflowViewState.IdRef="AppendItemToList`1_12" ItemToAppend="[strReplaceMatch]" List="[listBoldTexts]" />
                        <Assign DisplayName="Assign strTextGenerated" sap:VirtualizedContainerService.HintSize="434,105" sap2010:WorkflowViewState.IdRef="Assign_20">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">[strTextGenerated]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">[strTextGenerated.Replace(strFindMatch,strReplaceMatch+" ")]</InArgument>
                          </Assign.Value>
                        </Assign>
                      </Sequence>
                    </TryCatch.Try>
                    <TryCatch.Catches>
                      <Catch x:TypeArguments="s:Exception" sap2010:WorkflowViewState.IdRef="Catch`1_2">
                        <ActivityAction x:TypeArguments="s:Exception">
                          <ActivityAction.Argument>
                            <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                          </ActivityAction.Argument>
                          <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="468,89" sap2010:WorkflowViewState.IdRef="Sequence_51">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                          </Sequence>
                        </ActivityAction>
                      </Catch>
                    </TryCatch.Catches>
                    <TryCatch.Finally>
                      <Sequence DisplayName="Finally" sap:VirtualizedContainerService.HintSize="468,25" sap2010:WorkflowViewState.IdRef="Sequence_48">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </Sequence>
                    </TryCatch.Finally>
                  </TryCatch>
                </ActivityAction>
              </ParallelForEach>
            </Sequence>
          </If.Then>
          <If.Else>
            <Sequence DisplayName="Else" sap:VirtualizedContainerService.HintSize="468,165" sap2010:WorkflowViewState.IdRef="Sequence_72">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <Assign DisplayName="Assign TextGenerated Replace *" sap:VirtualizedContainerService.HintSize="434,105" sap2010:WorkflowViewState.IdRef="Assign_37">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[strTextGenerated]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">[strTextGenerated.Replace("*","")]</InArgument>
                </Assign.Value>
              </Assign>
            </Sequence>
          </If.Else>
        </If>
      </Sequence>
    </Parallel>
    <Parallel DisplayName="Parallel_Write_Text" sap:VirtualizedContainerService.HintSize="1074,119" sap2010:WorkflowViewState.IdRef="Parallel_9">
      <uga:WriteTextConnections BrowserFileId="{x:Null}" ConnectionAccountName="{x:Null}" ContinueOnError="{x:Null}" FileFriendlyName="{x:Null}" FileIdBackup="{x:Reference __ReferenceID1}" ManualFileId="{x:Null}" Section="{x:Null}" AuthScopesInvalid="False" ConnectionId="898f3a88-8a22-4d3c-bb3a-ad206f04118f" DisplayName="Write File Text" File="[gdirveDocument]" FileInputMode="UseExisting" sap:VirtualizedContainerService.HintSize="240,40" sap2010:WorkflowViewState.IdRef="WriteTextConnections_3" MatchCase="False" MatchMode="Contains" Text="[strTextGenerated]" UseConnectionService="True" WriteTextMode="BeginningOfDocument" WriteTextStyle="[UiPath.GSuite.Activities.Docs.Enums.WriteTextStyle.NormalText]">
        <uga:WriteTextConnections.Item>
          <ugam:DriveItemArgument BrowserId="{x:Null}" ConnectionDescriptor="{x:Null}" ConnectionKey="{x:Null}" FriendlyName="{x:Null}" FullPath="{x:Null}" IdOrUrl="{x:Null}" ParentId="{x:Null}" ParentIdFriendlyName="{x:Null}" RelativePath="{x:Null}" Existing="[gdirveDocument]" InputMode="UseExisting">
            <ugam:DriveItemArgument.Backup>
              <usau:BackupSlot x:TypeArguments="ugade:EDriveItemMode" x:Name="__ReferenceID1" StoredValue="UseExisting">
                <usau:BackupSlot.BackupValues>
                  <scg:List x:TypeArguments="x:Object" x:Key="Browse" Capacity="2">
                    <x:Null />
                    <x:Null />
                  </scg:List>
                </usau:BackupSlot.BackupValues>
              </usau:BackupSlot>
            </ugam:DriveItemArgument.Backup>
            <ugam:DriveItemArgument.FullPathHint>
              <InArgument x:TypeArguments="x:String">
                <Literal x:TypeArguments="x:String" Value="" />
              </InArgument>
            </ugam:DriveItemArgument.FullPathHint>
            <ugam:DriveItemArgument.ParentIdFullPathHint>
              <InArgument x:TypeArguments="x:String">
                <Literal x:TypeArguments="x:String" Value="" />
              </InArgument>
            </ugam:DriveItemArgument.ParentIdFullPathHint>
          </ugam:DriveItemArgument>
        </uga:WriteTextConnections.Item>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </uga:WriteTextConnections>
      <If Condition="[in_boolTexts]" DisplayName="If Check Bold Texts" sap:VirtualizedContainerService.HintSize="240,40" sap2010:WorkflowViewState.IdRef="If_3">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <If.Then>
          <Sequence DisplayName="Then" sap:VirtualizedContainerService.HintSize="468,165" sap2010:WorkflowViewState.IdRef="Sequence_73">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <Assign DisplayName="Assign listBoldTexts" sap:VirtualizedContainerService.HintSize="434,105" sap2010:WorkflowViewState.IdRef="Assign_35">
              <Assign.To>
                <OutArgument x:TypeArguments="scg:List(x:String)">[listBoldTexts]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="scg:List(x:String)">[listBoldTexts.Union(listHeading1Texts).Union(listHeading2Texts).Union(listHeading3Texts).Union(listHeading4Texts).Union(listTitleTexts).ToList]</InArgument>
              </Assign.Value>
            </Assign>
          </Sequence>
        </If.Then>
        <If.Else>
          <Sequence DisplayName="Else" sap:VirtualizedContainerService.HintSize="468,89" sap2010:WorkflowViewState.IdRef="Sequence_74">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </Sequence>
        </If.Else>
      </If>
    </Parallel>
    <ui:InvokeCode ContinueOnError="{x:Null}" Code="UpdateGoogleDocsHeadings(googleCredential,docId, heading1Texts, heading2Texts, heading3Texts, heading4Texts, titleTexts, boldTexts);&#xA;void UpdateGoogleDocsHeadings(string googleCredential, string docId, List&lt;string&gt; heading1, List&lt;string&gt; heading2, List&lt;string&gt; heading3, List&lt;string&gt; heading4, List&lt;string&gt; title, List&lt;string&gt; boldText)&#xA;{&#xA;    try&#xA;    {&#xA;        // Xác thực với Google API&#xA;        var credential = GoogleCredential.FromFile(googleCredential).CreateScoped(DocsService.Scope.Documents);&#xA;&#xA;        var service = new DocsService(new BaseClientService.Initializer()&#xA;        {&#xA;            HttpClientInitializer = credential,&#xA;            ApplicationName = &quot;Google Docs API UiPath&quot;,&#xA;        });&#xA;&#xA;        // Lấy nội dung tài liệu&#xA;        var doc = service.Documents.Get(docId).Execute();&#xA;        if (doc.Body == null || doc.Body.Content == null)&#xA;        {&#xA;            Console.WriteLine(&quot;Lỗi: Tài liệu không có nội dung.&quot;);&#xA;            return;&#xA;        }&#xA;&#xA;        var requests = new List&lt;Request&gt;();&#xA;&#xA;        // Duyệt qua từng phần tử trong nội dung tài liệu&#xA;        foreach (var element in doc.Body.Content)&#xA;        {&#xA;            if (element?.Paragraph?.Elements == null) continue; // Kiểm tra null&#xA;&#xA;            foreach (var textElement in element.Paragraph.Elements)&#xA;            {&#xA;                if (textElement.TextRun?.Content == null) continue;&#xA;&#xA;                string textContent = textElement.TextRun.Content;&#xA;                int? startIndex = textElement.StartIndex;&#xA;&#xA;                if (!startIndex.HasValue || string.IsNullOrEmpty(textContent)) continue;&#xA;&#xA;                string headingType = null;&#xA;&#xA;                // Xác định Heading&#xA;                if (heading1 != null &amp;&amp; heading1.Any(t =&gt; textContent.Contains(t))) headingType = &quot;HEADING_1&quot;;&#xA;                else if (heading2 != null &amp;&amp; heading2.Any(t =&gt; textContent.Contains(t))) headingType = &quot;HEADING_2&quot;;&#xA;                else if (heading3 != null &amp;&amp; heading3.Any(t =&gt; textContent.Contains(t))) headingType = &quot;HEADING_3&quot;;&#xA;                else if (heading4 != null &amp;&amp; heading4.Any(t =&gt; textContent.Contains(t))) headingType = &quot;HEADING_4&quot;;&#xA;                else if (title != null &amp;&amp; title.Any(t =&gt; textContent.Contains(t))) headingType = &quot;TITLE&quot;;&#xA;&#xA;                // Nếu là Heading, cập nhật kiểu đoạn văn bản&#xA;                if (headingType != null)&#xA;                {&#xA;                    requests.Add(new Request&#xA;                    {&#xA;                        UpdateParagraphStyle = new UpdateParagraphStyleRequest&#xA;                        {&#xA;                            Range = new Google.Apis.Docs.v1.Data.Range&#xA;                            {&#xA;                                StartIndex = startIndex.Value,&#xA;                                EndIndex = startIndex.Value + textContent.Length&#xA;                            },&#xA;                            ParagraphStyle = new ParagraphStyle { NamedStyleType = headingType },&#xA;                            Fields = &quot;namedStyleType&quot;&#xA;                        }&#xA;                    });&#xA;                }&#xA;&#xA;                // Duyệt từng từ trong danh sách `boldText`&#xA;&#x9;&#x9;&#x9;&#x9;if (boldText != null) &#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;foreach (var word in boldText)&#xA;               &#x9;&#x9; {&#xA;&#x9;                    int wordIndex = textContent.IndexOf(word, StringComparison.OrdinalIgnoreCase);&#xA;&#x9;                    if (wordIndex != -1)&#xA;&#x9;                    {&#xA;&#x9;                        requests.Add(new Request&#xA;&#x9;                        {&#xA;&#x9;                            UpdateTextStyle = new UpdateTextStyleRequest&#xA;&#x9;                            {&#xA;&#x9;                                Range = new Google.Apis.Docs.v1.Data.Range&#xA;&#x9;                                {&#xA;&#x9;                                    StartIndex = startIndex.Value + wordIndex,&#xA;&#x9;                                    EndIndex = startIndex.Value + wordIndex + word.Length&#xA;&#x9;                                },&#xA;&#x9;                                TextStyle = new TextStyle { Bold = true },&#xA;&#x9;                                Fields = &quot;bold&quot;&#xA;&#x9;                            }&#xA;&#x9;                        });&#xA;&#x9;                    }&#xA;               &#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;            }&#xA;        }&#xA;&#xA;        // Thực hiện cập nhật&#xA;        if (requests.Count &gt; 0)&#xA;        {&#xA;            var batchUpdateRequest = new BatchUpdateDocumentRequest { Requests = requests };&#xA;            service.Documents.BatchUpdate(batchUpdateRequest, docId).Execute();&#xA;            Console.WriteLine(&quot;Đã cập nhật Heading và Bold thành công.&quot;);&#xA;        }&#xA;        else&#xA;        {&#xA;            Console.WriteLine(&quot;Không tìm thấy văn bản cần cập nhật.&quot;);&#xA;        }&#xA;    }&#xA;    catch (Exception ex)&#xA;    {&#xA;        Console.WriteLine(&quot;Lỗi: &quot; + ex.Message);&#xA;    }&#xA;}&#xA;" DisplayName="Invoke Code Update Headings" sap:VirtualizedContainerService.HintSize="1074,188" sap2010:WorkflowViewState.IdRef="InvokeCode_5" Language="CSharp">
      <ui:InvokeCode.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="docId">[gdirveDocument.ID]</InArgument>
        <InArgument x:TypeArguments="scg:List(x:String)" x:Key="heading1Texts">[listHeading1Texts]</InArgument>
        <InArgument x:TypeArguments="scg:List(x:String)" x:Key="heading2Texts">[listHeading2Texts]</InArgument>
        <InArgument x:TypeArguments="scg:List(x:String)" x:Key="heading3Texts">[listHeading3Texts]</InArgument>
        <InArgument x:TypeArguments="scg:List(x:String)" x:Key="titleTexts">[listTitleTexts]</InArgument>
        <InArgument x:TypeArguments="scg:List(x:String)" x:Key="boldTexts">[listBoldTexts]</InArgument>
        <InArgument x:TypeArguments="scg:List(x:String)" x:Key="heading4Texts">[listHeading4Texts]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="googleCredential">[in_strGoogleCredential]</InArgument>
      </ui:InvokeCode.Arguments>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:InvokeCode>
  </Sequence>
</Activity>